# Introduction to HTML, CSS and javascript
without using frameworks
11 Mar 2025

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com


## 0. What I plan to cover
1. Just HTML and the browser (no server)
1. Introduce styling via CSS (Cascading Sytle Sheets)
1. Adding HTML elements and styling them
1. Adding interaction with javascript
1. Semantic HTML with sections, footers, articles etc.
1. Managing Web browser history (back and foward buttons) -- web server required
1. Custom events applied in an e-commerce demo
1. Web components and styling

## 1. Just HTML and the browser
Create this [index.html](https://github.com/siuyin/intro-html-css-js/blob/main/001/index.html) file:

.code 001/index.html

save it and open the file with a browser


## This is what I see on my browser
.image 001/img/hello.png

High resolution screens render the text in rather small font.

Also note the brower defaults to a serif font for body text.


## 2. Let's introduce some styling to make the font san-serif
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/002/index.html):

.code -numbers 002/index.html

I added line 6 to link in an external stylesheet:
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/002/main.css)


## This is the stylesheet file
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/002/main.css):

.code -numbers 002/main.css
Semicolons are needed in a stylesheet file to separate styling entries.


## And the result on my browser
.image 002/img/hello.png


## 3. Adding a header
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/003/index.html):

.code -numbers 003/index.html

Headers in HTML are `<h1>, <h2>, ...` .

I added a `<h1>` on line 10.


## Let's style paragraphs red
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/003/main.css):

.code -numbers 003/main.css

See lines 7 through 9. They style `<p>` elements red in color.


## The result on my browser
.image 003/img/hello.png


## 4. Adding interaction with javascript
Let us add a clickable element within the `<html> / <body>` :

.code 004/index.html /dim-mode:/,/$/

thus:

.image 004/img/hello.png


## Add the javascript
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/004/index.html)

.code 004/index.html /script/,/\/script/

Semicolons **;** are optional (implied) in javascript. Thus I choose to leave them out.


## Clicking on the checkbox
.image 004/img/clicked.png


## javascript click handler
.code -numbers 004/index.html /function dimModeHandler/,/dimModeHandler\(\)$/

lines 16 through 28 **define** the function.

line 29 is where the function is **called** and becomes active.


## Declaring a function
The function keyword declares a function. In this case it is
named dimModeHandler.

.code 004/index.html /function dimModeHandler/,/$/

An alternative way to declare a function in javascript is:

```
const dimModeHandler = () => { 
```

The above assigns an un-named function `() => { ... }` to the
constant name `dimModeHandler`. 


## Getting a DOM element
When you load a `html` file into a browser, it analyzes the file
and creates a model or representation of it in your computer's memory.

The line below gets an element identified with "dim-cb" (dim checkbox)
and assigns that element to the block-scoped constant `cb`.

.code 004/index.html /const cb/,/$/

Block-scoped means **cb** is only defined between the function's opening **{**
and closing **}** braces.


## querySelectorAll returns a list of elements
.code 004/index.html /const allPara/,/$/

`query` above refers to a **CSS** querySelector.

**querySelectorAll** in this case returns all **\<p\>** (paragraph) elements.


## addEventListener to the checkbox element
.code 004/index.html /cb.addEventListener/,/$/

The above line attaches an un-named function `() => { ... }` to the **cb**
element.

This function is called each time the **cb** checkbox is clicked.


## Adding and removing CSS classes
.code -numbers 004/index.html /cb.addEventListener/,/^ +}\)$/

On line 20, we check if the checkbox is **checked** or not.

If the checkbox is **checked**, we add the **dim** class to the **body**
and all **p** elements.

If not, we remove the **dim** class.


## dim class
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/004/main.css):

.code 004/main.css /p {/,/background-color/+1


## Layouts with CSS


## 5. Semantic HTML
The are main parts to the html content:
* **nav**: navigation
* **section**: the main content text
* **footer**: footer carrying, say, copyright info

[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/005/index.html):

.code 005/index.html /main-content/,/footer/


## main content is placed on a row
.code 005/main.css /main-content/,/}/

The default direction for a flex layout is **row**.

Thus **nav** and **section** are placed on a row.

Elements within **nav** however, are placed in a column.

.code 005/main.css /nav/,/}/

**footer** follows the main content row.

[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/005/main.css)

## The resulting layout
.image 005/img/fruit.png

.image 005/img/lorem.png  _ 1000


## Fixing browser back and forward buttons


## 6. Fixing the back and forward browser buttons
.code 005/index.html /addEventListener/,/preventDefault/

Clicking on a link without actually navigating to a URL breaks
the brower's go **back** and **forward** capability.

To fix this we need to use the **history** web API:
https://developer.mozilla.org/en-US/docs/Web/API/History_API

But that would *not* work with directly loading a file into the browser.

.image 006/img/history.png


## Serving the web page
I have included a simple web server in this project.
To serve the website:
```
 cd 006

 ../webserver
or
 PORT=8080 ../webserver
```
The above commands:
1. change directory (folder) to 006 where the fixed index.html is located
2. runs the webserver on `http:localhost:8080`


## Updating the nav handler
.code -numbers 006/index.html /function navHandler/,/}\)/

I introduced a new **basename** function on line 47.

And a **renderPage** function on line 48.

Souce: [index.html](https://github.com/siuyin/intro-html-css-js/blob/main/006/index.html)

## basename
.code 006/index.html /function basename/,/}/

1. **basename** takes a path
1. splits it into an array using "/" as a separator
1. takes the last part

This basename is saved in the **history.pushState** call.

.code 006/index.html /history.pushState/,/$/

for `'http://localhost:8080/apples'`, **apples** is saved when pushState is called.


## renderPage
.code -numbers 006/index.html /function renderPage/,/lorem/+1

Line 26 get the "fruit section"

A new `<h2>` element is inserted
that has content depending on whether the link is empty or not.


## popstate
The **popstate** event is produced by the browser when a user pushes the
back or forward buttons on the browser.

We attach a listner to the browser window thus:

.code 006/index.html /popstate/,/}\)/

Recall that ev.state is the basename of the url eg. 'http://localhost:8080/apples' => apples.

CSS selector `a[href*="X"]` means look for an `<a>` element that has a href that contains 'X'
and return the first match.

Then renderPage is called on the link 'a'.


## Custom javascript events


## 7. e-commerce example
Say you have an e-commerce like so:

.image 007/img/ecom.png

How would you get the shopping cart to update each time you click
on the catalog links?


## main html
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/007/index.html):

.code 007/index.html /body/,/\/body/

This time we have a separate `main.js` file. 

We can do this because we serving
the file over http with `'cd 007; ../webserver'` .


## Populating the catalog
.code 007/main.js /async function buildCatalog/,/await buildCatalog/

We build the catalog from data in the catalog.json file.
`items` contain entries like:

.code 007/catalog.json /\[/,/name/+1

sources: [main.js](https://github.com/siuyin/intro-html-css-js/blob/main/007/main.js),
[catalog.json](https://github.com/siuyin/intro-html-css-js/blob/main/007/catalog.json)


## buildCatalogWith(items)
.code 007/main.js /buildCatalogWith/,/ct.append/+3

addItemLink and removeItemLink both create `<a>` elements as well as attach event listeners to them.


## addItemLink
.code 007/main.js /let cart/,/}/

.code 007/main.js /addItemLink/,/return/+1

The cart object is updated and a `custom event: 'cartupdated'` is created and published.


## Shopping cart handler
.code 007/main.js /function shoppingCartHandler/,/^shoppingCartHandler/

The handler listens to the custom 'cartupdated' event and updates itself accordingly.


## removeItemLink
.code 007/main.js /removeItemLink/,/^}/

removeItemLink uses findIndex and splice to update cart.items in place.


## 8. Web components and styling
.image 008/img/comp.png _ 400

The red header and 'MyBtn' are re-useable web components.


## HTML
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/008/index.html):

.code -numbers 008/index.html /h1/,/MyBtn/+1

Note the custom components on lines 17 and 19.

Let see how they are built.


## But let's first look at main.css
.code 008/main.css /button/,/active/+3

.image 008/img/comp.png _ 180

This is how the big blue button is styled under the 'Main' section.


## Components are built with templates
and javascript classes.

.code 008/index.html /myh2/,/template/

The above template is in index.html. The browser does *not* render templates.

Instead we need to clone and insert the cloned template content via javascript.

source: [index.html](https://github.com/siuyin/intro-html-css-js/blob/main/008/index.html)


## The custom element class
.code -numbers 008/main.js /my-h2/,/append/+3


Line 6 is where a shadow DOM is created and attached  
to the `<my-h2>` element instance made by `constructor()`.

A shadow DOM is like a regular brower's Domain Object Model except it is hidden away
(in the shadows).  
Thus styling within the shadow DOM *cannot* affect the brower's DOM.

source: [main.js](https://github.com/siuyin/intro-html-css-js/blob/main/008/main.js)


## Slots
`<slot>` elements within a template are placeholders for content to be slotted-in.

.code -numbers 008/index.html /myh2/,/template/

Thus when the browser parses `'<my-h2>My Header</my-h2>'`,  
the text 'My Header' is inserted into the template,  
within the `<slot></slot>` elements on line 29.


## Named Slots
You can insert content into named slots with:

.code 008/index.html /MyBtn.* slot/,/$/

template fragment:

.code 008/index.html /name.*label/-3,/\/label/

The text 'MyBtn' slots into the unamed slot. This provides the button's text.

'Click Me' get inserted into the `'<slot name="label"></slot>'`,  
forming the button's label.


## main.js reaching into a shadow DOM
Mode "open" when attaching a shadow DOM,  
allows the brower's DOM to access the shadow DOM.

.code 008/main.js /attachShadow/,/$/

The element hosting the shadow DOM's is the shadow root.  
It has a shadowRoot property which can access the shadow DOM.  
See line 26 below.

.code -numbers 008/main.js /function myBtnHandler/,/myBtnHandler/

source: [main.js](https://github.com/siuyin/intro-html-css-js/blob/main/008/main.js)