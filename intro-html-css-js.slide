# Introduction to HTML, CSS and javascript
without using frameworks
11 Mar 2025

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com


## 0. What I plan to cover
1. Just HTML and the browser (no server)
1. Introduce styling via CSS (Cascading Sytle Sheets)
1. Adding HTML elements and styling them
1. Adding interaction with javascript
1. Semantic HTML with sections, footers, articles etc.
1. Managing Web browser history (back and foward buttons) -- web server required
1. Custom events applied in an e-commerce demo
1. Web components and styling
1. Deploying your website

## 1. Just HTML and the browser
Create this [index.html](https://github.com/siuyin/intro-html-css-js/blob/main/001/index.html) file:

.code 001/index.html

save it and open the file with a browser


## This is what I see on my browser
.image 001/img/hello.png

High resolution screens render the text in rather small font.

Also note the brower defaults to a serif font for body text.


## 2. Let's introduce some styling to make the font san-serif
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/002/index.html):

.code -numbers 002/index.html

I added line 6 to link in an external stylesheet:
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/002/main.css)


## This is the stylesheet file
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/002/main.css):

.code -numbers 002/main.css
Semicolons are needed in a stylesheet file to separate styling entries.


## And the result on my browser
.image 002/img/hello.png


## 3. Adding a header
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/003/index.html):

.code -numbers 003/index.html

Headers in HTML are `<h1>, <h2>, ...` .

I added a `<h1>` on line 10.


## Let's style paragraphs red
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/003/main.css):

.code -numbers 003/main.css

See lines 7 through 9. They style `<p>` elements red in color.


## The result on my browser
.image 003/img/hello.png


## 4. Adding interaction with javascript
Let us add a clickable element within the `<html> / <body>` :

.code 004/index.html /dim-mode:/,/$/

thus:

.image 004/img/hello.png


## Add the javascript
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/004/index.html)

.code 004/index.html /script/,/\/script/

Semicolons **;** are optional (implied) in javascript. Thus I choose to leave them out.


## Clicking on the checkbox
.image 004/img/clicked.png


## javascript click handler
.code -numbers 004/index.html /function dimModeHandler/,/dimModeHandler\(\)$/

lines 16 through 28 **define** the function.

line 29 is where the function is **called** and becomes active.


## Declaring a function
The function keyword declares a function. In this case it is
named dimModeHandler.

.code 004/index.html /function dimModeHandler/,/$/

An alternative way to declare a function in javascript is:

```
const dimModeHandler = () => { 
```

The above assigns an un-named function `() => { ... }` to the
constant name `dimModeHandler`. 


## Getting a DOM element
When you load a `html` file into a browser, it analyzes the file
and creates a model or representation of it in your computer's memory.

The line below gets an element identified with "dim-cb" (dim checkbox)
and assigns that element to the block-scoped constant `cb`.

.code 004/index.html /const cb/,/$/

Block-scoped means **cb** is only defined between the function's opening **{**
and closing **}** braces.


## querySelectorAll returns a list of elements
.code 004/index.html /const allPara/,/$/

`query` above refers to a **CSS** querySelector.

**querySelectorAll** in this case returns all **\<p\>** (paragraph) elements.


## addEventListener to the checkbox element
.code 004/index.html /cb.addEventListener/,/$/

The above line attaches an un-named function `() => { ... }` to the **cb**
element.

This function is called each time the **cb** checkbox is clicked.


## Adding and removing CSS classes
.code -numbers 004/index.html /cb.addEventListener/,/^ +}\)$/

On line 20, we check if the checkbox is **checked** or not.

If the checkbox is **checked**, we add the **dim** class to the **body**
and all **p** elements.

If not, we remove the **dim** class.


## dim class
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/004/main.css):

.code 004/main.css /p {/,/background-color/+1


## Layouts with CSS


## 5. Semantic HTML
The are main parts to the html content:
* **nav**: navigation
* **section**: the main content text
* **footer**: footer carrying, say, copyright info

[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/005/index.html):

.code 005/index.html /main-content/,/footer/


## main content is placed on a row
.code 005/main.css /main-content/,/}/

The default direction for a flex layout is **row**.

Thus **nav** and **section** are placed on a row.

Elements within **nav** however, are placed in a column.

.code 005/main.css /nav/,/}/

**footer** follows the main content row.

[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/005/main.css)

## The resulting layout
.image 005/img/fruit.png

.image 005/img/lorem.png  _ 1000


## Updating page contents with javascript
.code -numbers 005/index.html /script/,/\/script/


## Fixing browser back and forward buttons


## 6. Fixing the back and forward browser buttons
.code 005/index.html /addEventListener/,/preventDefault/

Clicking on a link without actually navigating to a URL breaks
the brower's go **back** and **forward** capability.

To fix this we need to use the **history** web API:
https://developer.mozilla.org/en-US/docs/Web/API/History_API

But that would *not* work with directly loading a file into the browser.

.image 006/img/history.png


## Serving the web page
I have included a simple web server in this project.
To serve the website:
```
 cd 006

 ../webserver
or
 PORT=8080 ../webserver
```
The above commands:
1. change directory (folder) to 006 where the fixed index.html is located
2. runs the webserver on `http:localhost:8080`


## Updating the nav handler
.code -numbers 006/index.html /function navHandler/,/}\)/

I introduced a new **basename** function on line 47.

And a **renderPage** function on line 48.

Souce: [index.html](https://github.com/siuyin/intro-html-css-js/blob/main/006/index.html)

## basename
.code 006/index.html /function basename/,/}/

1. **basename** takes a path
1. splits it into an array using "/" as a separator
1. takes the last part

This basename is saved in the **history.pushState** call.

.code 006/index.html /history.pushState/,/$/

for `'http://localhost:8080/apples'`, **apples** is saved when pushState is called.


## renderPage
.code -numbers 006/index.html /function renderPage/,/lorem/+1

Line 26 get the "fruit section"

A new `<h2>` element is inserted
that has content depending on whether the link is empty or not.


## popstate
The **popstate** event is produced by the browser when a user pushes the
back or forward buttons on the browser.

We attach a listner to the browser window thus:

.code 006/index.html /popstate/,/}\)/

Recall that ev.state is the basename of the url eg. 'http://localhost:8080/apples' => apples.

CSS selector `a[href*="X"]` means look for an `<a>` element that has a href that contains 'X'
and return the first match.

Then renderPage is called on the link 'a'.


## Custom javascript events


## 7. e-commerce example
Say you have an e-commerce like so:

.image 007/img/ecom.png

How would you get the shopping cart to update each time you click
on the catalog links?


## main html
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/007/index.html):

.code 007/index.html /body/,/\/body/

This time we have a separate `main.js` file. 

We can do this because we serving
the file over http with `'cd 007; ../webserver'` .


## Populating the catalog
.code 007/main.js /async function buildCatalog/,/await buildCatalog/

We build the catalog from data in the catalog.json file.
`items` contain entries like:

.code 007/catalog.json /\[/,/name/+1

sources: [main.js](https://github.com/siuyin/intro-html-css-js/blob/main/007/main.js),
[catalog.json](https://github.com/siuyin/intro-html-css-js/blob/main/007/catalog.json)


## buildCatalogWith(items)
.code 007/main.js /buildCatalogWith/,/ct.append/+3

addItemLink and removeItemLink both create `<a>` elements as well as attach event listeners to them.


## addItemLink
.code 007/main.js /let cart/,/}/

.code 007/main.js /addItemLink/,/return/+1

The cart object is updated and a `custom event: 'cartupdated'` is created and published.


## Shopping cart handler
.code 007/main.js /function shoppingCartHandler/,/^shoppingCartHandler/

The handler listens to the custom 'cartupdated' event and updates itself accordingly.


## removeItemLink
.code 007/main.js /removeItemLink/,/^}/

removeItemLink uses findIndex and splice to update cart.items in place.


## 8. Web components and styling
.image 008/img/comp.png _ 400

The red header and 'MyBtn' are re-useable web components.


## HTML
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/008/index.html):

.code -numbers 008/index.html /h1/,/MyBtn/+1

Note the custom components on lines 17 and 19.

Let see how they are built.


## But let's first look at main.css
.code 008/main.css /button/,/active/+3

.image 008/img/comp.png _ 180

This is how the big blue button is styled under the 'Main' section.


## Components are built with templates
and javascript classes.

.code 008/index.html /myh2/,/template/

The above template is in index.html. The browser does *not* render templates.

Instead we need to clone and insert the cloned template content via javascript.

source: [index.html](https://github.com/siuyin/intro-html-css-js/blob/main/008/index.html)


## The custom element class
.code -numbers 008/main.js /my-h2/,/append/+3


Line 6 is where a shadow DOM is created and attached  
to the `<my-h2>` element instance made by `constructor()`.

A shadow DOM is like a regular brower's Domain Object Model except it is hidden away
(in the shadows).  
Thus styling within the shadow DOM *cannot* affect the brower's DOM.

source: [main.js](https://github.com/siuyin/intro-html-css-js/blob/main/008/main.js)


## Slots
`<slot>` elements within a template are placeholders for content to be slotted-in.

.code -numbers 008/index.html /myh2/,/template/

Thus when the browser parses `'<my-h2>My Header</my-h2>'`,  
the text 'My Header' is inserted into the template,  
within the `<slot></slot>` elements on line 29.


## Named Slots
You can insert content into named slots with:

.code 008/index.html /MyBtn.* slot/,/$/

template fragment:

.code 008/index.html /name.*label/-3,/\/label/

The text 'MyBtn' slots into the unamed slot. This provides the button's text.

'Click Me' get inserted into the `'<slot name="label"></slot>'`,  
forming the button's label.


## main.js reaching into a shadow DOM
Mode "open" when attaching a shadow DOM,  
allows the brower's DOM to access the shadow DOM.

.code 008/main.js /attachShadow/,/$/

The element hosting the shadow DOM's is the shadow root.  
It has a shadowRoot property which can access the shadow DOM.  
See line 26 below.

.code -numbers 008/main.js /function myBtnHandler/,/myBtnHandler/

source: [main.js](https://github.com/siuyin/intro-html-css-js/blob/main/008/main.js)


## 9. Deploying your website.
What we have built thus far is typically known as a 'static' website.  
This is because the files and assets like images are fixed.  
The only get updated when we edit the file   
and push the changes to the folder where the server can see and serve them.

There are many no-cost options for hosting a website.  
Some of them include vercel, cloudflare pages and github pages.

I prefer github pages because I keep my files on github (https://github.com/)


## Try out the web components site live on Github pages
Visit: [https://siuyin.github.io/intro-html-css-js/008/index.html](https://siuyin.github.io/intro-html-css-js/008/index.html)

Lets understand how this works.

Github pages is powered by [jekyll](https://jekyllrb.com/) and github workflows.


## Configuring your github repository for github pages to serve

* Go to your repo and click on settings.

.image 009/img/settings.png _ 800 

* On the left side of the page click 'pages'

.image 009/img/pages.png 300 _


## Select a branch to serve
I choose to serve my 'main' branch. This is typically what most people would do as
the main branch is the 'production' branch.

.image 009/img/branch.png


## github 'pages build and deploy' action
On each push to you main branch,  
github will initiate an action to run the 'pages build and deploy' workflow.

.image 009/img/actions.png 400 _


## Website URL
In my case it will be at [https://siuyin.github.io/intro-html-css-js/](https://siuyin.github.io/intro-html-css-js/) .

And you should see something similar to the image below:

.image 009/img/root.png 300 _

github pages is serving the 'README.md' file on my repo.


## To see the web components site
We need to visit [https://siuyin.github.io/intro-html-css-js/008/](https://siuyin.github.io/intro-html-css-js/008/)

github pages will then serve the 'index.html' in the '008' folder.

But the site will initially not work properly. CSS and javascript were not properly loaded.

.code 008/index.html /link href/,/$/

.code 008/index.html /script src/,/$/

`index.html` is asking to load main.css from  
'https://siuyin.github.io/intro-html-css-js/main.css'
and main.js from  
'https://siuyin.github.io/intro-html-css-js/main.js'

These files do not exist. They are actually located in 008/main.css and 008/main.js .


## _config.yaml jekyll configuration file
We need to tell github pages buider -- 'jekyll' where the baseurl is:

[_config.yml](https://github.com/siuyin/intro-html-css-js/blob/main/_config.yml):

.code _config.yml 

The above jekyll configuration directive says that if 'index.html' asks for 'main.css',  
look for it in '/intro-html-css-js/008/main.css' .


## Additional content added 15 Mar 2025

10. Assertions with console.Assertions
1. imports and exports with javascript modules
1. Web components implemented with javascript modules
1. Handling streaming responses
1. javascript for backend servers


## 10. Assertions
.code 010/index.html

run with cd 010; ../webserver

.image 010/img/assert.png


## 11. javascript modules
.code -numbers 011/index.html /import/,/== v.r/+1

Lines 4 through 5 defines a single test.  
With a bit more effort we can have a table of tests as seen above.


## funcs.js
.code 011/funcs.js

And the remaining tests:

.code -numbers 011/index.html /a: 3/-2,/\/script/-1


## On running the tests
.image 011/img/testrun.png 360 _


## 12. Web Components implemented with javascript modules
.code 012/index.html /body/,/\/body/

The `'my-h2'` and `'my-btn'` components are implemented with 
corresponding javascript modules.

demo: `cd 012; ../webserver`


## my-h2 components
.code 012/myh2.js

The first thing run is 'insTemplate'.  
It inserts the contents of 'myh2.html' into an element with id="tpl" in index.html .

.code 012/index.html /tpl/,/$/


## insTemplate
insTemplates uses the `fetch()` web API to fetch the text contents of 
'filename' to append to the host element with 'id'.

.code 012/insert.js

Let continue with the 'my-h2' custom web component.

## my-h2
.code -numbers 012/myh2.js

The constructor creates a shadow root hosted by the 
'my-h2' element being constructed in index.html .

Line 12 is needed to prevent flashing elements being contructed before they are ready.


## Hiding construction of custom web Components
[main.css](https://github.com/siuyin/intro-html-css-js/blob/main/012/main.css):

.code -numbers 012/main.css

Lines 7 through 10 tells the browser not to display (render) the elements.  
The are still however in the DOM, just not displayed.


## my-btn
`<my-btn>` is similar to `<my-h2>` except it has a click handler that reaches into the shadow DOM
via 'shadowRoot' see Line 19.

.code -numbers 012/mybtn.js /define/,/^myBtnHandler/


## 13. Handling streaming responses
Generative AI with Large Language Models can take many seconds to complete their output.  
To improve user experience we should stream the response.

[main.go](https://github.com/siuyin/intro-html-css-js/blob/main/013/main.go):

.code 013/main.go /Split/,/\t}$/

The above code simulate a slow responding LLM.  
A linux x86-64 binary is
available in `013/streamer`.

`cd 013; ./streamer`


## chunked update
[index.html](https://github.com/siuyin/intro-html-css-js/blob/main/013/html/index.html):

.code 013/html/index.html /body/,/\/body/

There is a section to hold the streamed response.

Let's look at the javascript.


## fetch and text decoding
.code -numbers 013/html/main.js /mdHandler/,/innerHTML/+1

In lines 7 and 8,  `<pre>` node is temporally inserted to hold the raw, unformatted markdown text.

Each chunk of raw markdown is accummulated in variable `'md'`.

Finally the markdown is parsed.


## 14. How about javascript in the backend?
javascript runs on many browsers because browsers have a javascript engine.  
Similarly, to run javascript on a backend server, you also need a javascript engine.

The most common "engine"/platform is nodejs.  
But there are others like Deno and Bun.

Just like browser javascript has Web APIs (eg. document.getElementById etc.),  
each platform has their set of supporting libraries and APIs.

As nodejs is the most established, both Deno and Bun strive to be compatible with nodejs.
However there will be differences.


## Pros and Cons of using javascript in the backend
Pro:
1. If you know javascript, you can use it in the backend.
1. Many of Web API classes and functions like Request, Response and fetch() are supported by nodejs, deno etc.
1. javascript engines are fast and excel at input/output bound tasks.

Con:
1. javascript is single threaded and performs poorly with compute intensive tasks.
1. javascript is dynamically typed (let a=2; a="two" will not cause an error).
1. other languages like `rust`: no garbage collection and memory safety,  
   or `go`: strongly typed, excellent concurrency, are often faster than javascript.

Deno understands both javascript and typescript *without* any add-ons.


## Streaming server coded in javascript/deno
[main.js](https://github.com/siuyin/intro-html-css-js/blob/main/014/main.js):

.code 014/main.js /import/,/^main/


## javacript repository
.code 014/main.js /import/,/dflt/

The 'import's look familiar but what is '@std/http...' all about?

[deno.json](https://github.com/siuyin/intro-html-css-js/blob/main/014/deno.json):

.code 014/deno.json

'deno.json' tells the deno platform about the dependencies required to run 'main.js' .


## Differences between deno and nodejs
[dflt.js](https://github.com/siuyin/intro-html-css-js/blob/main/014/dflt.js):

.code 014/dflt.js


## mdHandler
.code -numbers 014/main.js /const path/,/mdHandler/+1

.code -numbers 014/main.js /function mdHandler/,+1

    ...

.code -numbers 014/main.js /hdrs/,/^}/

`'req'` is a Web API `Request` and `'res'` is a `Response` 


## slowStream
.code -numbers 014/main.js /delay/-2,/^}/

`'ReadableStream'` is from the Web API. It has a `'pull'` method that is called
when its stream buffer has space for more data.
`'delay'` is from deno's standard library.


## pull
.code -numbers 014/main.js /pull/,/}\)/

Line 57: close the stream if we have no more words.  
Line 59: enqueue words, encoded as UTF-8 text, on to the stream  
Line 60: delay. For node.js: `import {setTimeout} from   
'node:timers/promises'; await setTimeout(dly)`


## Code and presentation slides.

[https://github.com/siuyin/intro-html-css-js](https://github.com/siuyin/intro-html-css-js)